// Generated by CoffeeScript 1.7.1
(function() {
  var $, fs, mime, path;

  fs = require('fs');

  mime = require('mime');

  path = require('path');

  $ = require('cheerio');

  module.exports = {
    configDefaults: {
      args: {
        dest: './dest'
      }
    },
    activate: function(state) {
      return atom.workspaceView.command("tistory-editor:build", (function(_this) {
        return function(event) {
          return _this.build();
        };
      })(this));
    },
    deactivate: function() {},
    build: function() {
      var filepath, _ref, _ref1;
      filepath = (_ref = atom.workspaceView.find('.tree-view .selected')) != null ? (_ref1 = _ref.view()) != null ? typeof _ref1.getPath === "function" ? _ref1.getPath() : void 0 : void 0 : void 0;
      return fs.stat(filepath, function(err, state) {
        var dest, filename;
        if (state.isFile()) {
          if (filepath && path.extname(filepath) === '.html') {
            this.html = $.load(fs.readFileSync(filepath));
            this.html('img').each((function(_this) {
              return function(i, element) {
                var dataurl, imagepath;
                imagepath = $(element).attr('src');
                if ((imagepath.indexOf('http://') === -1) && (imagepath.indexOf('https://') === -1)) {
                  dataurl = "data:" + (mime.lookup(imagepath)) + ";base64," + (fs.readFileSync(imagepath).toString('base64'));
                  return $(element).attr('src', dataurl);
                }
              };
            })(this));
            dest = atom.config.settings['tistory-editor'].args.dest;
            filename = path.join(dest, path.basename(filepath));
            return fs.writeFileSync(filename, this.html.html());
          }
        }
      });
    }
  };

}).call(this);
